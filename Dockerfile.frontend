# Build stage
FROM node:16-alpine as build

# Set working directory
WORKDIR /app

# Copy package files and install dependencies
COPY frontend/package*.json ./
RUN npm ci --quiet

# Copy frontend source code
COPY frontend/ ./

# Set up ARG variables that will be filled from docker-compose
ARG REACT_APP_API_URL
ARG REACT_APP_WEBSOCKET_URL
ARG REACT_APP_TOKEN_EXPIRY_THRESHOLD_MINS=5
ARG REACT_APP_ENABLE_ANALYTICS=true
ARG REACT_APP_ENABLE_NOTIFICATIONS=true
ARG REACT_APP_DEFAULT_THEME=light
ARG REACT_APP_ITEMS_PER_PAGE=10

# Set React environment variables from ARGs
ENV REACT_APP_API_URL=${REACT_APP_API_URL}
ENV REACT_APP_WEBSOCKET_URL=${REACT_APP_WEBSOCKET_URL}
ENV REACT_APP_TOKEN_EXPIRY_THRESHOLD_MINS=${REACT_APP_TOKEN_EXPIRY_THRESHOLD_MINS}
ENV REACT_APP_ENABLE_ANALYTICS=${REACT_APP_ENABLE_ANALYTICS}
ENV REACT_APP_ENABLE_NOTIFICATIONS=${REACT_APP_ENABLE_NOTIFICATIONS}
ENV REACT_APP_DEFAULT_THEME=${REACT_APP_DEFAULT_THEME}
ENV REACT_APP_ITEMS_PER_PAGE=${REACT_APP_ITEMS_PER_PAGE}
ENV REACT_APP_FILE_UPLOAD_MAX_SIZE=5242880

# Build the application with proper asset paths
ENV PUBLIC_URL=/
RUN npm run build

# Production stage
FROM nginx:alpine

# Copy built assets from the build stage
COPY --from=build /app/build /usr/share/nginx/html

# Copy nginx configuration
COPY docker/nginx/nginx.conf /etc/nginx/conf.d/default.conf

# Expose port
EXPOSE 80

# Add health check for nginx
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/ || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"] 
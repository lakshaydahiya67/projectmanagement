version: '3.8'

services:
  # Redis service for caching, WebSockets and Celery
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    # Only expose Redis to other containers, not to the host
    expose:
      - "6379"
    volumes:
      - redis_data:/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    command: ["redis-server", "--appendonly", "yes"]

  # Backend Django service
  backend:
    build: 
      context: .
      dockerfile: Dockerfile.backend
    container_name: backend
    restart: unless-stopped
    volumes:
      - sqlite_data:/data
      - static_data:/app/staticfiles
      - media_data:/app/media
    entrypoint: ["/app/docker/entrypoint-backend.sh"]
    depends_on:
      redis:
        condition: service_healthy
    env_file:
      - .env
    # Add environment variables not in .env file
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DJANGO_SETTINGS_MODULE=projectmanagement.settings
      - DATABASE_PATH=/data/db.sqlite3
      # Superuser credentials for first run (only used if superuser doesn't exist)
      - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME:-admin}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL:-admin@example.com}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD:-adminpassword}
    expose:
      - "8000"
    networks:
      - app_network
    # Temporarily disabled healthcheck to debug static files issue
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 3
    #   start_period: 30s
    # Set memory and CPU limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Celery worker
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile.celery
    container_name: celery_worker
    restart: unless-stopped
    volumes:
      - sqlite_data:/data
      - media_data:/app/media
    entrypoint: ["/app/docker/entrypoint-celery.sh"]
    depends_on:
      backend:
        condition: service_started
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DJANGO_SETTINGS_MODULE=projectmanagement.settings
      - DATABASE_PATH=/data/db.sqlite3
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 512M

  # Celery beat for scheduled tasks
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile.celery
    container_name: celery_beat
    restart: unless-stopped
    volumes:
      - sqlite_data:/data
    entrypoint: ["/app/docker/entrypoint-celerybeat.sh"]
    depends_on:
      backend:
        condition: service_started
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DJANGO_SETTINGS_MODULE=projectmanagement.settings
      - DATABASE_PATH=/data/db.sqlite3
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M

  # Frontend React service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        - REACT_APP_API_URL=${BACKEND_URL}
        - REACT_APP_WEBSOCKET_URL=${WEBSOCKET_URL}
    container_name: frontend
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - static_data:/usr/share/nginx/html/backend/static
    depends_on:
      backend:
        condition: service_started
    env_file:
      - .env
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M

networks:
  app_network:
    driver: bridge

volumes:
  redis_data:
  sqlite_data:
  static_data:
  media_data:
